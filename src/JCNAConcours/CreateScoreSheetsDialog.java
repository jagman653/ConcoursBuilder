/* 
 * Copyright (C) 2017 Edward F Sowell
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package JCNAConcours;

import static JCNAConcours.EditConcoursEntryDialog.okDialog;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.AcroFields;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import java.awt.Component;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import us.efsowell.concours.lib.Concours;
import us.efsowell.concours.lib.Entry;
import us.efsowell.concours.lib.MasterJaguar;
import us.efsowell.concours.lib.MasterJaguars;
import us.efsowell.concours.lib.MasterPersonnel;

/**
 *
 * @author Ed Sowell
 */
public class CreateScoreSheetsDialog extends javax.swing.JDialog {
    //Vector<Component> traversalOrder;
   // FocusTraversalPolicyConcoursBuilder ftp;

  //  private static String strPlacardInputFile =  "C:\\Users\\Ed Sowell\\Documents\\NetBeansProjects\\SecondPDF\\WindscreenPlacardForm.pdf";
  //  private static String strPlacardOutputFile = "C:\\Users\\Ed Sowell\\Documents\\NetBeansProjects\\SecondPDF\\WindscreenPlacardFormFilledIn.pdf";

   //String strParentOfDBFIle    ;
   private static String strScoreSheetsInputFile;
   private static String strScoreSheetsOutputFileBase;
   private String strAbsolutePathToNewDir;
   // strScoreSheetsInputFile  = "C:\\Users\\Ed Sowell\\Documents\\NetBeansProjects\\SecondPDF\\Score_Sheets v07022016Form.pdf";
   // strScoreSheetsOutputFileBase = "C:\\Users\\Ed Sowell\\Documents\\NetBeansProjects\\SecondPDF\\Score_SheetsFilledIn.pdf";
   //private static String theConcoursFolder;
   Concours theConcours;
    //PdfReader placardReader;
    PdfReader scoreSheetReaderOriginal;
    PdfReader scoreSheetReaderCopy;

    /**
     * Creates new form CreatePlacards
     */
    public CreateScoreSheetsDialog(java.awt.Frame parent, boolean modal, Connection conn, Concours aConcours) {
        super(parent, modal);
        theConcours = aConcours;
        int pos;
        String strConcoursPath= theConcours. GetThePath(); // includes the db file
        pos = strConcoursPath.lastIndexOf("\\");
        strAbsolutePathToNewDir = strConcoursPath.substring(0, pos);
        
        
        strScoreSheetsInputFile = theConcours.GetConcoursBuilderDocsPath() + "\\Score_Sheets v07022016Form.pdf";
        strScoreSheetsOutputFileBase = strAbsolutePathToNewDir + "\\Score_SheetsFilledIn.pdf";
        
        try {
            this.scoreSheetReaderOriginal = new PdfReader(strScoreSheetsInputFile);
        } catch (IOException ex) {
            okDialog("CreateScoreSheetsDialog failed to create PdfReader");
            theConcours.GetLogger().log(Level.SEVERE, null, ex);
            theConcours.GetLogger().info("CreateScoreSheetsDialog failed to create PdfReader");
            return;
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtConcoursDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtHostClub = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Score sheets (Pdf)");
        setFocusCycleRoot(false);

        txtConcoursDate.setText("1/1/2017");
        txtConcoursDate.setToolTipText("Enter date of the concours");

        jLabel1.setText("Concours date (m/d/y):");

        jLabel3.setText("Host Club:");

        txtHostClub.setToolTipText("Enter JCNA club hosting the concours");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addGap(39, 39, 39)
                .addComponent(btnCancel)
                .addGap(108, 108, 108))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtConcoursDate, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHostClub, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConcoursDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHostClub, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        String ownerUniqueName = "" ; 
        String ownerFirst = "";
        String ownerLast = "";
        String ownerClub = "";
        String entryYear = "";
        String entryClassName = "";
        String jaguarColor = "";
        String ownerJCNA = "";
        String jaguarDescription = ""; 
        String jaguarModel = ""; // Model
        String jaguarBody = ""; // Coupe, Conv, Etc. Unfortunately, it's not in the ConcourseBuilder database!
        String entryID = ""; // the Class with a dash number, e.g., C12/JS-2
        
        
        String streetAddress = ""; // e.g., "1207 N. Van Buren St"
        String cityStatePostalCode = "";
        
        String concoursHostClub = txtHostClub.getText();
        String concoursDate = txtConcoursDate.getText();
        
        
        try {
            // needs to loop over all Entries in Concourse
            
            //        String street,  String address, String citystatezip, String club, String strOutputFile)
            MasterPersonnel mpObject = theConcours.GetMasterPersonnelObject();
            MasterJaguars masterJaguars = theConcours.GetMasterJaguarsObject();
            int count = 0;
            for( Entry e : theConcours.GetEntriesList()){
                ownerUniqueName = e.GetOwnerUnique();
                ownerFirst = e.GetOwnerFirst();
                ownerLast = e.GetOwnerLast();
                entryYear = e.GetYear();
                entryClassName = e.GetClassName();
                jaguarDescription = e.GetUniqueDescription();
                jaguarModel = e.GetModel();
                MasterJaguar mj = masterJaguars.GetMasterJaguar(jaguarDescription);  
                jaguarColor = mj.getColor();
                entryID = e.GetID();
                ownerJCNA = mpObject.GetMasterPersonnelJCNA(ownerUniqueName).toString();
                ownerClub = mpObject.GetMasterPerson(ownerUniqueName).getClub();
                streetAddress = mpObject.GetMasterPerson(ownerUniqueName).getAddressSreet();
                cityStatePostalCode =  mpObject.GetMasterPerson(ownerUniqueName).getCity() + ", " + mpObject.GetMasterPerson(ownerUniqueName).getState() + " " + mpObject.GetMasterPerson(ownerUniqueName).getPostalCode();
                
                scoreSheetReaderCopy = new PdfReader(scoreSheetReaderOriginal);
                int dotIndex = strScoreSheetsOutputFileBase.indexOf('.', 0);
                String strSS;
                String className = e.GetClassName();
                if(className.equals("DISP")){
                    strSS = strAbsolutePathToNewDir + "\\Scoresheets\\DisplayOnly\\" + e.GetOwnerLast()+"_"+ e.GetUniqueDescription() + "-Scoresheets.pdf";
                } else if( "D".equals(e.GetClassName().substring(0,1))){
                    strSS = strAbsolutePathToNewDir + "\\Scoresheets\\Driven\\" + e.GetOwnerLast()+"_"+ e.GetUniqueDescription() + "-Scoresheets.pdf";
                } else {
                    strSS = strAbsolutePathToNewDir + "\\Scoresheets\\ChampionSpecial\\"+ e.GetOwnerLast()+"_" +  e.GetUniqueDescription() + "-Scoresheets.pdf";
                }
                //String strSS = strAbsolutePathToNewDir + "\\" + e.GetClassName().substring(0,3) + "-" + e.GetUniqueDescription() + "-Scoresheets.pdf";
                fillInScoreSheetForm(this.scoreSheetReaderCopy,  concoursHostClub, concoursDate, entryYear, jaguarModel, entryClassName, jaguarColor, jaguarBody, ownerFirst + " " + ownerLast, ownerJCNA, entryID, "", streetAddress, cityStatePostalCode, ownerClub, strSS);
                count++;
            }
            String msg = "Score sheets for " + count + " Entries have been saved in Scoresheets folder in " +  strAbsolutePathToNewDir;
            okDialog(msg);
            theConcours.GetLogger().info(msg);
        } catch (DocumentException ex) {
            theConcours.GetLogger().log(Level.SEVERE, null, ex);
            theConcours.GetLogger().info("ERROR: CreateScoreSheetsDialog failed with Document exception");
            System.exit(-1);
        }
        
        // Close & dispose dialog
        this.setVisible(false);
        this.dispose();
        
       
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private  void fillInScoreSheetForm(PdfReader reader, String hostclub,  String date, String yr, String model, String cls, String color, String bodytype, String entrant, String jcnanum, String entryId, String street,  String address, String citystatezip, String club, String strOutputFile) throws DocumentException {
            PdfStamper stamper;
        try {
            stamper = new PdfStamper(reader, new FileOutputStream(strOutputFile));
            AcroFields form = stamper.getAcroFields();
            
            // Page 1
            form.setField("PLACEP1", ""); // Must be filled in after event
            form.setField("HOSTP1", hostclub);
            form.setField("DATEP1", date);
            
            form.setField("YEARP1", yr);
            form.setField("MODELP1", model);
            form.setField("CLASSP1", cls);
            form.setField("COLORP1", color);
            form.setField("BODYTYPEP1", bodytype);
            
            form.setField("ENTRANTNAMEP1", entrant);
            form.setField("ENTRANTJCNAP1", jcnanum);
            form.setField("ENTRYNUMBERP1", entryId);
            form.setField("CITYSTATEZIPP1", citystatezip);
            form.setField("STREETP1", street);
            form.setField("ADDRESSP1", address);
            form.setField("HOMECLUBP1", club);
            
            // Page 2
            form.setField("ENTRANTNAMEP2", entrant);
            form.setField("ENTRANTJCNAP2", jcnanum);
            form.setField("ENTRYNUMBERP2", entryId);
            form.setField("DATEP2", date);
            
            // Page 3
            form.setField("ENTRANTNAMEP3", entrant);
            form.setField("ENTRANTJCNAP3", jcnanum);
            form.setField("ENTRYNUMBERP3", entryId);
            form.setField("DATEP3", date);
            
            // Page 4
            form.setField("ENTRANTNAMEP4", entrant);
            form.setField("ENTRANTJCNAP4", jcnanum);
            form.setField("ENTRYNUMBERP4", entryId);
            form.setField("DATEP4", date);
            
            stamper.close();
        } catch (IOException ex) {
                String msg = "IOException while writing scoresheets";
                theConcours.GetLogger().info(msg);
                okDialog(msg);
        }
   }
    
    

 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtConcoursDate;
    private javax.swing.JTextField txtHostClub;
    // End of variables declaration//GEN-END:variables
}
