/* 
 * Copyright (C) 2017 Edward F Sowell
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package JCNAConcours;

import static JCNAConcours.AddConcoursEntryDialog.okDialog;
import java.awt.Component;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import us.efsowell.concours.lib.Concours;
import us.efsowell.concours.lib.JCNAClass;
import us.efsowell.concours.lib.JCNAClassRule;
//import us.efsowell.concours.lib.JCNAClassRules_2;
import us.efsowell.concours.lib.JCNAClasses;
//import static us.efsowell.concours.lib.LoadSQLiteConcoursDatabase.CopyJCNAClassRules;
import us.efsowell.concours.lib.MasterJaguar;
import us.efsowell.concours.lib.MasterPersonExt;

/**
 *
 * @author Ed Sowell
 */
public class AddMasterJaguar_2 extends javax.swing.JDialog {
    MasterJaguar newMj;
    Concours theConcours;
    Logger theLogger;
    Connection theConn;
    JCNAClasses theJCNAClasses;  
    MasterPersonExt  theSelectedMasterPerson;
    JCNAClassChooserGUI theJCNAClassChooser;
        
    /**
     * Constructor
     */
    public AddMasterJaguar_2(java.awt.Frame parent, boolean modal, Connection aConn, Concours aConcours, ArrayList<JCNAClass> aJCNAClassesList,  String aOwnerUniqueName) {
        super(parent, modal);
        initComponents();
        theConcours = aConcours;
        theJCNAClasses = theConcours.GetJCNAClasses();
        theLogger = theConcours.GetLogger();
        theConn = aConn;
        theJCNAClassChooser = new JCNAClassChooserGUI(false, theConcours);
        txtOwner.setText(aOwnerUniqueName);
        theSelectedMasterPerson = theConcours.GetMasterPersonnelObject().GetMasterPerson(aOwnerUniqueName);
        PopulateCboListsAddMasterJaguar(); // Populate from memory
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel21 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtColor = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtPlateVIN = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        btnAddToStable = new javax.swing.JButton();
        txtOwner = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUniqueDescription = new javax.swing.JTextField();
        cboJOCLACategory = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cboYear = new javax.swing.JComboBox();
        cboModel = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cboDescriptor = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cboJCNAChampClasses = new javax.swing.JComboBox();
        cboJCNADrivenClasses = new javax.swing.JComboBox();
        btnLookupJCNAClasses = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnFinished = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Master Jaguar");

        jLabel21.setText("Year");

        txtDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescriptionFocusLost(evt);
            }
        });

        jLabel22.setText("Jaguar Description");

        jLabel23.setText("Color");

        jLabel24.setText("Plate or VIN");

        btnAddToStable.setText("Add to stable");
        btnAddToStable.setToolTipText("Click after choosing Championship AND Driven classes. Adds to the Owner's stable.");
        btnAddToStable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToStableActionPerformed(evt);
            }
        });

        txtOwner.setEditable(false);

        jLabel1.setText("Owner unique name");

        jLabel2.setText("JOCLA Category");

        txtUniqueDescription.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtUniqueDescriptionFocusGained(evt);
            }
        });

        cboJOCLACategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Unique description");

        cboYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboYear.setToolTipText("Select model year");

        cboModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboModel.setToolTipText("Select Jaguar model");

        jLabel4.setText("Model");

        cboDescriptor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboDescriptor.setToolTipText("Optional descriptor.");

        jLabel5.setText("Descriptor");

        jLabel6.setText("Select Driven Division");

        cboJCNAChampClasses.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cboJCNADrivenClasses.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnLookupJCNAClasses.setText("Look up JCNA Classes");
        btnLookupJCNAClasses.setToolTipText("Click to generate classes matching selected parameters");
        btnLookupJCNAClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLookupJCNAClassesActionPerformed(evt);
            }
        });

        jLabel7.setText("Select Championship or Special class");

        btnFinished.setText("Finished");
        btnFinished.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel6)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(18, 18, 18)
                                            .addComponent(cboModel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(27, 27, 27)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(cboDescriptor, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(26, 26, 26)
                                                    .addComponent(btnLookupJCNAClasses))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(2, 2, 2)
                                            .addComponent(jLabel21)
                                            .addGap(60, 60, 60)
                                            .addComponent(jLabel4))
                                        .addComponent(cboJCNAChampClasses, 0, 784, Short.MAX_VALUE)
                                        .addComponent(cboJCNADrivenClasses, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtPlateVIN, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtUniqueDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cboJOCLACategory, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel23)
                                .addGap(107, 107, 107)
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel22)
                                .addGap(112, 112, 112)
                                .addComponent(jLabel3)
                                .addGap(138, 138, 138)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(btnAddToStable, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(btnFinished)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel21)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboDescriptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLookupJCNAClasses))
                .addGap(24, 24, 24)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cboJCNAChampClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(cboJCNADrivenClasses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel24)
                        .addComponent(jLabel22)
                        .addComponent(jLabel23)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPlateVIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUniqueDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboJOCLACategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToStable)
                    .addComponent(btnFinished))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    
    private void txtDescriptionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescriptionFocusLost

    }//GEN-LAST:event_txtDescriptionFocusLost

    private boolean validateFields(){
        boolean result = true;
        String o= txtOwner.getText().trim();
        String y = cboYear.getSelectedItem().toString().trim();
        
        String d = txtDescription.getText().trim();
        String u = txtUniqueDescription.getText().trim();
        String m = cboModel.getSelectedItem().toString().trim();
        if("All".equals(y)  || "All".equals(m)  || "".equals(o)  || "".equals(d) || "".equals(u) ){
            result = false;
        }
        return result;
    }
    private void btnAddToStableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToStableActionPerformed
        int intYear;
        String strYear;
        String strJcna_cClass;
        String strJcna_dClass;
        JCNAClass jcna_cClass;
        JCNAClass jcna_dClass;
        String jocla_cat;
        String description;
        String uniqueDescription;
        String color;
        String platevin;
        String temp;
        String model; 
        //
        // Add a single Jaguar to the stable
        //
        if(!validateFields()){
           okDialog("A Year and Model must be selected. Owner, Description, and UniqueDescription cannot be blank.");
           // Note: newMj will be unchanged
       } else{
           strYear = cboYear.getSelectedItem().toString().trim();
           intYear = Integer.parseInt(cboYear.getSelectedItem().toString());
           // extract the JCNA Championship Class name 
           int iBegin;
           int iEnd;
           temp = cboJCNAChampClasses.getSelectedItem().toString();
           iBegin = temp.indexOf(':') + 2;
           temp = temp.substring(iBegin); // 
           iEnd = temp.indexOf("Model") - 1;
           strJcna_cClass = temp.substring(0, iEnd); // The JCNA Class name
           jcna_cClass = theJCNAClasses.getJCNAClass(strJcna_cClass); 
           if(jcna_cClass == null){
               String msg = "JCNA Class " + strJcna_cClass + " not found in AddMasterJaguar";
               okDialog(msg);
               theLogger.info(msg);
               this.setVisible(false);
               return;
           }
           // Now the Driven
           temp = cboJCNADrivenClasses.getSelectedItem().toString();
           iBegin = temp.indexOf(':') + 2;
           temp = temp.substring(iBegin); // 
           iEnd = temp.indexOf("Model") - 1;
           strJcna_dClass = temp.substring(0, iEnd); // The JCNA Class name
           jcna_dClass = theJCNAClasses.getJCNAClass(strJcna_dClass);
           if(jcna_dClass == null){
               String msg = "JCNA Class " + strJcna_dClass + " not found in AddMasterJaguar";
               okDialog(msg);
               theLogger.info(msg);
               this.setVisible(false);
               return;
           }
           
           jocla_cat =  this.cboJOCLACategory.getSelectedItem().toString();
           description = txtDescription.getText();
           uniqueDescription = txtUniqueDescription.getText();
           model = cboModel.getSelectedItem().toString();
           color = txtColor.getText();
           platevin = txtPlateVIN.getText();
           newMj  = new MasterJaguar(jcna_cClass.getName() , jcna_dClass.getName(), jocla_cat, intYear, model, description, uniqueDescription,  color,  platevin);
           //theLogger.info("Added " + uniqueDescription + " to stable");
           //okDialog("Added " + uniqueDescription + " to stable");
           this.setVisible(false);
           this.dispose();
        }
    }//GEN-LAST:event_btnAddToStableActionPerformed

    
 
    private void btnLookupJCNAClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLookupJCNAClassesActionPerformed
        List<String> filteredListChampionship;
        List<String> filteredListDriven;
        List<String> filteredListSpecial;
        cboJCNAChampClasses.setModel(new javax.swing.DefaultComboBoxModel(new String[]{}));
        //cboJCNAChampClasses.setRenderer(new JCNAClassCBORenderer());

        String strYear = cboYear.getSelectedItem().toString();
        String strModel = cboModel.getSelectedItem().toString();
        String strDescriptor = cboDescriptor.getSelectedItem().toString();
       // filteredListChampionship = filter(theConn, strYear, strModel, "Championship", strDescriptor, "rulesCopy1");
        filteredListChampionship = theJCNAClassChooser.filterInMemory(theConn, strYear, strModel, "Championship", strDescriptor);
        String [] strChampAry;
        strChampAry = filteredListChampionship.toArray(new String[filteredListChampionship.size()] );
        cboJCNAChampClasses.removeAllItems();
        for(String s: strChampAry){
            this.cboJCNAChampClasses.addItem(s);
        // any Jaguar in a Master Persons stable to be entered in a Championship class, a Driven Class, one of the 3 Special Division classes, or Preservation.
        }

        // THE SPECIAL CLASSES ARE NOT ASSOCIATED WITH MASTER JAGUAR.
        // Instead, they are among the choices when a Jag is added as a Concours Entry. This allows 
        // 
        /*
        filteredListSpecial = theJCNAClassChooser.filterInMemory(theConn, strYear, strModel, "Special", strDescriptor);
        String [] strSpecialAry;
        strSpecialAry = filteredListSpecial.toArray(new String[filteredListSpecial.size()] );
        for(String s: strSpecialAry){
            this.cboJCNAChampClasses.addItem(s);
        }
        */
        
        filteredListDriven = theJCNAClassChooser.filterInMemory(theConn, strYear, strModel, "Driven", strDescriptor);
        String [] strDrivenAry;
        strDrivenAry = filteredListDriven.toArray(new String[filteredListDriven.size()] );
        cboJCNADrivenClasses.removeAllItems();
        for(String s: strDrivenAry){
            this.cboJCNADrivenClasses.addItem(s);
        }

    }//GEN-LAST:event_btnLookupJCNAClassesActionPerformed

    private void txtUniqueDescriptionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUniqueDescriptionFocusGained
        String description = txtDescription.getText().trim();
        int lastPos;
        int len;
        if("".equals(description)){
            txtDescription.requestFocusInWindow();
            JOptionPane.showMessageDialog(null, "You must enter Description.");
        } else{
            String desc2 = description.replaceAll("[\\s]", "");
            len = desc2.length();
            lastPos = (len < 8) ? len:8;
            String strUniqueDescription = desc2.substring(0,lastPos) + "_" +  txtOwner.getText();
            txtUniqueDescription.setEnabled(true);
            txtUniqueDescription.setText(strUniqueDescription);
            txtUniqueDescription.setEditable(false);
        }
    }//GEN-LAST:event_txtUniqueDescriptionFocusGained

    private void btnFinishedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishedActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnFinishedActionPerformed

    public MasterJaguar getNewMasterJaguar(){
        return newMj;
    }
    
            //
            //  Populate comboBoxes from Memory
            //
    private void PopulateCboListsAddMasterJaguar(){
        //
        // JOCLA Categories
        //
        String[] strJoclaCategories = { "Classics", "Competition/Custom", "E-Type Series 1", "E-Type Series 1.5", "E-Type Series 2", "E-Type Series 3", "F-Type", "Large Saloons", "Small Saloons",
                        "S-Type", "XF",  "XJ Saloons Series I", "XJ Saloons Series II", "XJ Saloons Series III", "XJ New Series", "XJ-L", "XJ-S", "XK", "XK Sports Cars", "XK-8", "X-Type" };
        cboJOCLACategory.setModel(new javax.swing.DefaultComboBoxModel(strJoclaCategories));

        // Years 
        cboYear.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"All"}));
        //int firstJagYear = 1927;
        //int maxJagYear = theConcours.GetMaxModelYear(); // 10/21/2018
        // 10/21/2018
        Integer [] minFirstMaxLast = theConcours.GetJCNAClassRules().getMinFirstMaxLastYears(theConn, "JCNAClassRules", theLogger);
        Integer firstJagYear = minFirstMaxLast[0];
        Integer maxJagYear = minFirstMaxLast[1];
        for(int i = 0; i< (maxJagYear-firstJagYear+1); i++){
            cboYear.addItem(firstJagYear + i);
        }
        //
        // Jaguar Models
        //
        cboModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All"}));
        List<String> models = new ArrayList<>();
        ArrayList<JCNAClassRule>  theJCNAClassRules = theConcours.GetJCNAClassRules().getJCNAClassRules();
        for(JCNAClassRule jcr : theJCNAClassRules){
            String theModel = jcr.getModelName();
            if(!models.contains(theModel)){
                models.add(theModel);
            }
        }
        ArrayList<String> sortedModels = new ArrayList<String>(models);
        Collections.sort(sortedModels);
        String [] sortedModelsAry;
        sortedModelsAry = sortedModels.toArray(new String[sortedModels.size()] );
        for(String s: sortedModelsAry){
            cboModel.addItem(s);
        }
        //
        // Descriptors
        //
        cboDescriptor.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All"}));
        List<String> descriptors = new ArrayList<>();
        for(JCNAClassRule jcr : theJCNAClassRules){
            String d1 = jcr.getDescriptor_1();
            if( d1 != null && !d1.isEmpty() && !descriptors.contains(d1.trim())) descriptors.add(d1.trim());
            String d2 = jcr.getDescriptor_2();
            if(d2 != null  && !d2.isEmpty() && !descriptors.contains(d2.trim())) descriptors.add(d2.trim());
            String d3 = jcr.getDescriptor_3();
            if(d3 != null  && !d3.isEmpty() && !descriptors.contains(d3.trim())) descriptors.add(d3.trim());
        }
        ArrayList<String> sortedDescriptors = new ArrayList<>(descriptors);
        Collections.sort(sortedDescriptors);
        String [] sortedDescriptorssAry;
        sortedDescriptorssAry = sortedDescriptors.toArray(new String[sortedDescriptors.size()] );
        for(String s: sortedDescriptorssAry){
            cboDescriptor.addItem(s);
        }
        theLogger.info("Finished setting up AddmasterJaguar combo boxes from memory");
    }    
            //
            //  Populate models comboBox directoy from databaes--- no longer used
            //
    /*
    private void PopulateCboLists(){
        //
        //  set up comboBox lists
        //
        String[] strJoclaCategories = { "Classics", "Competition/Custom", "E-Type Series 1", "E-Type Series 1.5", "E-Type Series 2", "E-Type Series 3", "F-Type", "Large Saloons", "Small Saloons",
                        "S-Type", "XF",  "XJ Saloons Series I", "XJ Saloons Series II", "XJ Saloons Series III", "XJ New Series", "XJ-L", "XJ-S", "XK", "XK Sports Cars", "XK-8", "X-Type" };
        cboJOCLACategory.setModel(new javax.swing.DefaultComboBoxModel(strJoclaCategories));

        cboYear.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"All"}));

        int firstJagYear = 1927;
       // Integer maxJagYear = getLargestLastYear(theConn, theLogger); // 10/21/2018
        //Integer [] years = new Integer[2030-1927+1];
        for(int i = 0; i< (maxJagYear-firstJagYear+1); i++){
            cboYear.addItem(firstJagYear + i);
        }
        //cboDivision.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All", "Championship", "Driven", "Special"}));

        cboModel.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All"}));

        cboDescriptor.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"All"}));
        
            try{
                Statement stmt_models;
                stmt_models = theConn.createStatement();
                String q = "select modelname from JCNAClassRules";
                ResultSet rs = stmt_models.executeQuery(q);
                List<String> models = new ArrayList<>();
                while(rs.next()){
                    String theModel = rs.getString("modelname");
                    if(!models.contains(theModel)){
                        models.add(theModel);
                    }
                }
                stmt_models.close();
                rs.close();
                ArrayList<String> sortedModels = new ArrayList<String>(models);
                Collections.sort(sortedModels);
                String [] sortedModelsAry;
                sortedModelsAry = sortedModels.toArray(new String[sortedModels.size()] );
                for(String s: sortedModelsAry){
                    cboModel.addItem(s);
                }
            } catch (SQLException ex) {
                okDialog("SQLException in AddMasterJaguar_2 PopulateCboLists(), cboModels");
                theLogger.log(Level.SEVERE, null, ex);
            }

            //  Populate Descriptors comboBox
            //
            
            try {
                Statement stmt_desc;
                stmt_desc = theConn.createStatement();
                String q = "select descriptor_1, descriptor_2, descriptor_3 from JCNAClassRules";
                ResultSet rs_desc= stmt_desc.executeQuery(q);
                List<String> descriptors = new ArrayList<>();
                while(rs_desc.next()){
                    String d1 = rs_desc.getString("descriptor_1");
                    if( d1 != null && !d1.isEmpty() && !descriptors.contains(d1.trim())) descriptors.add(d1.trim());
                    String d2 = rs_desc.getString("descriptor_2");
                    if(d2 != null  && !d2.isEmpty() && !descriptors.contains(d2.trim())) descriptors.add(d2.trim());
                    String d3 = rs_desc.getString("descriptor_3");
                    if(d3 != null  && !d3.isEmpty() && !descriptors.contains(d3.trim())) descriptors.add(d3.trim());
                }
                stmt_desc.close();
                rs_desc.close();
                ArrayList<String> sortedDescriptors = new ArrayList<>(descriptors);
                Collections.sort(sortedDescriptors);
                String [] sortedDescriptorssAry;
                sortedDescriptorssAry = sortedDescriptors.toArray(new String[sortedDescriptors.size()] );
                for(String s: sortedDescriptorssAry){
                    cboDescriptor.addItem(s);
                }
                theLogger.info("Finished setting up combo boxes");
                
            } catch (SQLException ex) {
                okDialog("SQLException in AddMasterJaguar_2 PopulateCboLists(), Descriptors");
                theLogger.log(Level.SEVERE, null, ex);
            }
        
    }
    */
    private List<String> filter(Connection aConn, String aYear, String aModel, String aDivision, String aDescriptor, String aRulesCopy){
        String q;
        List<String> filteredList = new ArrayList<>();
        try {
            aConn.setAutoCommit(false);
        } catch (SQLException ex) {
            theLogger.log(Level.SEVERE, null, ex);
        }

        try {
            if(aYear != "All"){
                int y = Integer.parseInt(aYear);
                q = "delete from " + aRulesCopy  + " where firstyear > " + y + " or lastyear < " + y + ";";
                Statement stmt_y = aConn.createStatement();
                stmt_y.executeUpdate(q);
                stmt_y.close();
            }
            if(aModel != "All"){
                q = "delete from " + aRulesCopy  + " where modelname not like '" + aModel + "';";
                Statement stmt_m = aConn.createStatement();
                stmt_m.executeUpdate(q);
                stmt_m.close();
            }
            if(aDivision != "All"){
                q = "delete from " + aRulesCopy  + " where division not like '" + aDivision + "';";
                Statement stmt_d = aConn.createStatement();
                stmt_d.executeUpdate(q);
                stmt_d.close();
            }
            if(aDescriptor != "All"){
                q = "delete from " + aRulesCopy  + " where descriptor_1 not like '" + aDescriptor + "' and descriptor_2 not like '" + aDescriptor + "' and descriptor_3 not like '" + aDescriptor + "';";
                Statement stmt_des = aConn.createStatement();
                stmt_des.executeUpdate(q);
                stmt_des.close();
            }
            aConn.commit();
            aConn.setAutoCommit(true);
            
        } catch (SQLException ex) {
            
            theLogger.log(Level.SEVERE, null, ex);
        }
        
        String displayText = "[None]";
        String d;
        q = "select * from " + aRulesCopy + ";";
        try{
            Statement stmt_filtered = aConn.createStatement();
            ResultSet rs_filtered = stmt_filtered.executeQuery(q); 
            displayText = "[None]";
            while (rs_filtered.next()) {
                if(displayText == "[None]") displayText = "";
                String classname = rs_filtered.getString("classname");
                String modelname = rs_filtered.getString("modelname");
                d = rs_filtered.getString("descriptor_1");
                String descriptor_1;
                if(d != null){
                    descriptor_1 = d;
                } else {
                    descriptor_1 = "";
                }
                d = rs_filtered.getString("descriptor_2");
                String descriptor_2;
                if(d != null){
                    descriptor_2 = d;
                } else {
                    descriptor_2 = "";
                }
                d = rs_filtered.getString("descriptor_3");
                String descriptor_3;
                if(d != null){
                    descriptor_3 = d;
                } else {
                    descriptor_3 = "";
                }

                int firstyear = rs_filtered.getInt("firstyear");
                int lastyear = rs_filtered.getInt("lastyear");
                displayText = displayText + "Class: " + classname + " Model: " + modelname + " ";
                String descriptors = "";
                //if((descriptor_1 != "") or (descriptor_2 != "") or (descriptor_3 != "")) { descriptors =  "Descriptors: ";} 
                if(descriptor_1 != "" || descriptor_2 != ""  || descriptor_3 != "" )  descriptors =  "Descriptors: ";
                if(descriptor_1 != "") descriptors = descriptors + descriptor_1;
                if(descriptor_2 != "") descriptors = descriptors + " " + descriptor_2;
                if(descriptor_3 != "") descriptors = descriptors + " " + descriptor_3;
                displayText = displayText + " " + descriptors + " Years: " + firstyear + "-" + lastyear + "\n";
                if(displayText.isEmpty()) {filteredList.add("[no matches for user choices]");} else {filteredList.add(displayText);}
                displayText = "[None]";

            }
            rs_filtered.close();
        } catch (SQLException ex) {
            okDialog("SQLException in AddMasterJaguar_2 filter()");
            theLogger.log(Level.SEVERE, null, ex);
        }
        return filteredList;
    }
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        //Set the Nimbus look and feel 
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMasterJaguar_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMasterJaguar_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMasterJaguar_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMasterJaguar_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToStable;
    private javax.swing.JButton btnFinished;
    private javax.swing.JButton btnLookupJCNAClasses;
    private javax.swing.JComboBox cboDescriptor;
    private javax.swing.JComboBox cboJCNAChampClasses;
    private javax.swing.JComboBox cboJCNADrivenClasses;
    private javax.swing.JComboBox cboJOCLACategory;
    private javax.swing.JComboBox cboModel;
    private javax.swing.JComboBox cboYear;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField txtColor;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextField txtOwner;
    private javax.swing.JTextField txtPlateVIN;
    private javax.swing.JTextField txtUniqueDescription;
    // End of variables declaration//GEN-END:variables
}
