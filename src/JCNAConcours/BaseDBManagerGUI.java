/* 
 * Copyright (C) 2017 Edward F Sowell
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package JCNAConcours;

import static JCNAConcours.AddConcoursEntryDialog.okCancelDialog;
import static JCNAConcours.AddConcoursEntryDialog.okDialog;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.ini4j.Wini;
import us.efsowell.concours.lib.Concours;
import us.efsowell.concours.lib.LoadSQLiteConcoursDatabase;

/**
 *
 * @author Ed Sowell
 */
public class BaseDBManagerGUI extends javax.swing.JFrame {
    public static Logger logger;
   
    public Concours theConcours;
    public CopySaveDBFile copysaveObject;
    String thePath; // where the DB & CSV files are
    Connection theConn;
    private File flBaseDBFile;
    boolean boolDBFileOpened;
    private boolean boolStandalone;
    private String strCurDir;
    String strInUseDB;
    String strBaseDBFile;
    LoadSQLiteConcoursDatabase loadSQLiteConcoursDatabaseb ;

    /**
     * Creates new form BaseDatabaseManager
     */
    public BaseDBManagerGUI(boolean aStandalone, Concours aConcours, String aInUseDB) {
        boolStandalone = aStandalone;
        strInUseDB = aInUseDB;
        theConcours = aConcours;
        loadSQLiteConcoursDatabaseb = new LoadSQLiteConcoursDatabase(); // function access
        initComponents();
        if(boolStandalone){
            logger = Logger.getLogger("baseDBManagerGUI");
        } else {
            logger = aConcours.GetLogger();
        }
        copysaveObject = new CopySaveDBFile();
        strCurDir = Paths.get(".").toAbsolutePath().normalize().toString(); // Just to see the current working directory...

        logger.info("\n" + " Current working directory: " + strCurDir + "\n");
        String userDocDirectory = new JFileChooser().getFileSystemView().getDefaultDirectory().toString(); // tricky way of getting at user/ Documents directory
        String strIniFilePath= userDocDirectory + "\\" + "ConcoursBuilder.ini";

        File flIni = new File(strIniFilePath);
        Wini ini = null;
        try {
            ini = new Wini(flIni);
        } catch (IOException ex) {
            logger.log(Level.SEVERE, null, ex);
            logger.info("Error: Could not open " + strIniFilePath);
            System.exit(-1);
        }
       // String installPath = ini.get("InstallSettings", "InstallPath");
        String concoursBuilderDataPath; // This is where the concours database & other data for the run is

        if(strCurDir.contains("NetBeansProjects")){
            concoursBuilderDataPath = ini.get("InstallSettings", "DeveloperDataPath");
        } else{
            concoursBuilderDataPath = ini.get("InstallSettings", "UserDataPath");
        }
        logger.info(" Current working directory: " + strCurDir)    ;        
        BaseDatabaseFileChooser.setCurrentDirectory(new File(concoursBuilderDataPath)); 
        BaseDatabaseFileChooser.setDialogTitle("Open JCNA Base database");
        BaseDatabaseFileChooser.setFileFilter(new CustomBaseDBFileFilter() );
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BaseDatabaseFileChooser = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        OpenMenuItem = new javax.swing.JMenuItem();
        ExitMenuItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        ClearMenuItem = new javax.swing.JMenuItem();
        AddMenuItem = new javax.swing.JMenuItem();
        RemoveMenuItem = new javax.swing.JMenuItem();
        ChangeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Base database manager");

        FileMenu.setText("File");

        OpenMenuItem.setText("Open");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenuItem);

        ExitMenuItem.setText("Exit");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenuItem);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Edit");

        ClearMenuItem.setText("Clear Base Database");
        ClearMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(ClearMenuItem);

        AddMenuItem.setText("Add JCNA Member");
        AddMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(AddMenuItem);

        RemoveMenuItem.setText("Remove JCNA Member");
        RemoveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(RemoveMenuItem);

        ChangeMenuItem.setText("Change JCNA Member");
        ChangeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangeMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(ChangeMenuItem);

        jMenuBar1.add(EditMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
       if(boolStandalone){
           logger.info("Exiting BaseDBManagerGUI");
           System.exit(0);
       } else{
            this.setVisible(false);
            return;
       }
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        //
        // load from database file
        //
        int returnVal;

        returnVal = BaseDatabaseFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            flBaseDBFile = BaseDatabaseFileChooser.getSelectedFile();
            strBaseDBFile = flBaseDBFile.getAbsolutePath(); // this is the the absolute path to the DB file as a string
            if(!strBaseDBFile.contains("Base")){
                okDialog("The selected DB file must be a Concours Base fail. Such files contain Base in the name, e.g., SoCalBase.db.");     
                return;
            }
            if(strInUseDB != null && strBaseDBFile.equals(strInUseDB)){
                okDialog("The selected DB file is currently in use by the Open Concours. Changes with Base DFatabas Manager are not allowed");     
                return;
            }

            /*
                Create a copy in case user decides to not save the revised DB file.
            */ 
            String strBackupFileName = strBaseDBFile.replace(".db", "Backup.db");
            try {
                // Both source (the Opened Concours DB file) & destination (the newly created file named strBackupFileName) are closed before copyDBFile() returns
                copysaveObject.copyDBFile(flBaseDBFile, new File(strBackupFileName), logger);
            } catch (IOException ex) {
                okDialog("Error: Failed to copy DB file to " + strBackupFileName + " in OpenMenuItemActionPerformed");
                logger.log(Level.SEVERE, "Error: Failed to copy DB file to " + strBackupFileName + " in OpenMenuItemActionPerformed", ex);
                System.exit(-1);
            }
            
            thePath = strBaseDBFile;
            theConn = null;
            try {
                Class.forName("org.sqlite.JDBC");
                String strConn;
                strConn = "jdbc:sqlite:" + strBaseDBFile ;
                theConn = DriverManager.getConnection(strConn);
                theConn.createStatement().execute("PRAGMA foreign_keys = ON");
            } catch ( ClassNotFoundException | SQLException e ) {
                logger.info( e.getClass().getName() + ": " + e.getMessage() );
                System.exit(0);
            }
            boolDBFileOpened = true;
            logger.info("Opened JCNA Base database " + strBaseDBFile + " successfully");
            /*cboYear.setEnabled(boolDBFileOpened);
            cboModel.setEnabled(boolDBFileOpened);
            cboDivision.setEnabled(boolDBFileOpened);
            cboDescriptor.setEnabled(boolDBFileOpened);
            btnLookup.setEnabled(boolDBFileOpened);
            
            PopulateCboLists();
            */
        } else {
            logger.info("User cancelled opening Base DB file");
        }
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void ChangeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangeMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ChangeMenuItemActionPerformed

    private void RemoveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RemoveMenuItemActionPerformed

    private void AddMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddMenuItemActionPerformed

    private void ClearMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMenuItemActionPerformed
        int result = okCancelDialog("Are you SURE you want to clear " + strBaseDBFile +
        "?\nAll JCNA members and their Jaguars will be removed, creating empty MasterPersonnel and MasterJaguar tables.\n Do this ONLY if your intention is to create an entierly new Base database file.");
        if(result != JOptionPane.YES_OPTION){
            return;
        }
        else{
            loadSQLiteConcoursDatabaseb.clearMasterPersonnelAndMasterJaguarTables(theConn, logger);
        }
    }//GEN-LAST:event_ClearMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseDBManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseDBManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseDBManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseDBManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
                // boolean aStandalone, Concours aConcours, String aInUseDB
           BaseDBManagerGUI baseDBManagerGUI = new BaseDBManagerGUI(true, null, null);
                
            baseDBManagerGUI.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                logger.info("Returning from BaseDBManagerGUI");
            }
            });        
            baseDBManagerGUI .setDefaultCloseOperation(HIDE_ON_CLOSE);
            baseDBManagerGUI.setVisible(true);
        }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddMenuItem;
    private javax.swing.JFileChooser BaseDatabaseFileChooser;
    private javax.swing.JMenuItem ChangeMenuItem;
    private javax.swing.JMenuItem ClearMenuItem;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JMenuItem RemoveMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
